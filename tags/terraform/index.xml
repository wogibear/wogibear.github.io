<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Terraform on Blog</title>
    <link>https://blog.bordrless.io/tags/terraform/</link>
    <description>Recent content in Terraform on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 11 Jan 2019 07:13:39 +0000</lastBuildDate>
    
	<atom:link href="https://blog.bordrless.io/tags/terraform/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing Terraform Modules - Part 1</title>
      <link>https://blog.bordrless.io/posts/testing-tf-modules-p1/</link>
      <pubDate>Fri, 11 Jan 2019 07:13:39 +0000</pubDate>
      
      <guid>https://blog.bordrless.io/posts/testing-tf-modules-p1/</guid>
      <description>Terraform modules make it really easy to create reusable building blocks for provisioning infrastructure, reducing the amount of repition and aiding in keeping our infrastructure as code &amp;ldquo;DRY&amp;rdquo;. However, this then brings with it the problem of ensuring the modules have been validated regularly to prevent missing variable declarations in your interfaces file or invalid syntax, which if present affect the usabilty of the modules by others.
Terraform provides an easy way to carry out these checks with its validate command, a brief description from the Terraform website below (more information here) -</description>
    </item>
    
  </channel>
</rss>